CSE 331 Homework 4.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Luke LeVasseur

Problem 0.

(a)
   r = p x q:
       Let the terms of p be p_0 ... p_n-1 and the terms of q be q_0 ... q_m-1.
       Set r = the zero polynomial
       Set i = 0
       {{Inv: r is the poly including all terms p_0 ... p_i-1 * q_0 ... q_m-1}}
       While i < n:
           j = 0
           {{Inv2: Inv and r is the poly including all terms p_0 ... p_i-1 * q_0 ... q_j-1}}
           While j < m:
               Set temp = a new polynomial with coefficient = coef p_i * coef q_j and degree = degree p_i + degree q_j
               If r already contains a poly with same degree as temp:
                   Use poly addition to add temp to the poly in r with the same degree
               Otherwise:
                   Add temp directly to r
               Set j = j + 1
       Set i = i + 1

(b)
    find number of times largest degree of second poly goes into largest degree of first poly
    multiply smaller degrees of second poly by number of times
    add to smaller degrees of first poly
    repeat

    Polynomial subtraction is polynomial addition where r = p + (-q)

    Polynomial term division (or PTD) is such that r = p / q is equal to r = coef p / coef q
                                                                    and degree = degree p - degree q

    Avidant told me that I could assume the polynomial is sorted in decreasing order by degree

    q = p / d:
           Let the terms of p be p_0 ... p_n-1 and the terms of d be d_0 ... d_m-1.
           Set q = 0
           Set r = p
           Set i = 0
           {{Inv: q is the terms of p divisible by d_0 ... d_i-1 divided by d_0 ... d_i-1
                  and r is the terms of p not divisible by d_0 ... d_i-1 and the degree of r != 0}}
           while the degree of r_i >= the degree of d_i and the degree of d_i != 0:
               val = new poly with coef = coef r_i / coef d_i and degree = degree r_i - degree d_i
               divisor = d * val using polynomial multiplication algorithm
               q = q + val using polynomial addition algorithm
               r = r - divisor using polynomial subtraction algorithm (defined earlier in my answer)
               i = i + 1;
    q is quotient
    r is remainder

(c)
    (x^3+x-1) / (x+1) = x^2-x+2

    q = 0
    r = copy of p = (x^3+x-1)
    i = 0
    while the degree of r_i >= the degree of d_i and the degree of d_i != 0:
        Iteration 0: r = (x^3+x-1), q = 0, d = (x+1), i=0
            [val = new poly with coef = coef r_i / coef d_i and degree = degree r_i - degree d_i] val = 1x^2
            [divisor = d * val using polynomial multiplication algorithm] divisor = x^2 * (x+1) = x^3 + x^2
            [q = q + val using polynomial addition algorithm] q = 0 + x^2 = x^2
            [r = r - divisor using polynomial subtraction algorithm] r = (x^3+x-1) - (x^3 + x^2) = -x^2 + x - 1
            [i = i + 1] i = 0 + 1 = 1
        Iteration 1: r = -x^2 + x - 1, q = x^2, d = (x+1), i=1
            [val = new poly with coef = coef r_i / coef d_i and degree = degree r_i - degree d_i] val = -x
            [divisor = d * val using polynomial multiplication algorithm] divisor = -x * (x+1) = -x^2-x
            [q = q + val using polynomial addition algorithm] q = x^2 - x
            [r = r - divisor using polynomial subtraction algorithm] r = (-x^2+x-1) - (-x^2-x) = 2x - 1
            [i = i + 1] i = 1 + 1 = 2
        Iteration 2: r = 2x-1, q = x^2 - x, d = (x+1), i=2
            [val = new poly with coef = coef r_i / coef d_i and degree = degree r_i - degree d_i] val = 2
            [divisor = d * val using polynomial multiplication algorithm] divisor = 2 * (x+1) = 2x+2
            [q = q + val using polynomial addition algorithm] q = x^2 - x + 2
            [r = r - divisor using polynomial subtraction algorithm] r = (2x-1) - (2x+2) = -3
            [i = i + 1] i = 2 + 1 = 3
        degree of r_i = 0, degree of d_i = 1. End loop
        DONE!
        q = x^2 - x + 2
        r = -3

Problem 1.

(a)
    RatNum(int n, int d)
        No longer has to store n and d in reduced form. Becomes less complex as the reduction
        operations can be left out.

    checkRep()
        Only has to check that denom >= 0. Becomes less complex as the code doesn't have to check if RatNum is in
        reduced form.

    hashCode()
        Code has to put RatNum into reduced form before assigning hash value. Becomes more complex as there needs to
        be a reduction operation before assigning the hash values using gcd().

    equals(Obj obj)
        Has to compare reduced forms of each RatNum to check for equality. Becomes more complex as both this and obj
        need to be reduced using gcd() prior to comparison.

    toString()
        Has to print RatNum in reduced form, so RatNum has to be reduced before printing. Becomes more complex as gcd()
        must be called prior to any checks on the format of the RatNum that lead to printing.

(b)
    The changes to all these methods fail to meet the spec because they force the object to become mutable, a violation
    of RatNum's immutable property. The lack of a @modifies tag means that RatNum should not modify any of its internal
    elements.

(c)
    It is sufficient to only call checkRep() at the end of the constructors because RatNum is immutable, thus no
    method in RatNum has the ability to change the values of n and d. If RatNum passes checkRep after the constructors,
    the terms of the representation invariant are guaranteed to stay true by the immutable property.


Problem 2.

(a)
    I only called checkRep() after the constructor. Because RatTerm is Immutable, there is no reason to keep checking
    if the coeff and expt satisfy the rep inv because they cannot be changed after the constructor. There is no reason
    to call CheckRep() at the start of the constructor because coeff and expt have yet to be set at that point.


(b)
    RatTerm()
        No longer has to set expt to 0 when coeff equals 0. Becomes less complex as the statements
        checking if coeff equals 0 and setting expt to 0 are no longer necessary.

    toString()
        Would need to change check for 0 case from the expt to the coeff. No complexity difference, simply checking
        a different value.

(c)
    RatTerm()
        Would need to have a separate case for when coeff equals NaN in which expt is set to 0. Becomes more complex
        due to addition of new if statement.

    Both Inv: coeff.isNaN() ==> expt = 0 and Inv: coeff.equals(RatNum.ZERO) ==> expt = 0 are relatively
    unnecessary to the functionality of the code. Adding these invariants doesn't really provide any benefit, thus
    I would choose to use neither to make the code simpler and easier to read.


Problem 5.

x
x^2
x^3
x^4