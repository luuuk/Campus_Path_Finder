  // Students should not edit this file.

plugins {
  id "net.ltgt.errorprone-base" version "0.0.13"
  id 'org.ajoberstar.grgit' version '2.3.0'
}
apply plugin: 'java'

import org.ajoberstar.grgit.Grgit

// sourceCompatibility = 1.11
// targetCompatibility = 1.11

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  implementation group: 'asm', name: 'asm-all', version: '2.2.3' // for staff tools
  // These should really be testImplementation, but put them in implementation so
  // javadoc target works without change for test files.
  implementation group: 'junit', name: 'junit', version: '4.12'
  implementation group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
  implementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

  compile 'org.ajoberstar:grgit:2.3.0'
}

javadoc {
    options.tags = [ "spec.modifies", "spec.effects", "spec.requires", "specfield" ] 
}

tasks.withType(Javadoc) {
  exclude 'hw3/**'
  options.addStringOption('Xwerror', '-quiet')
}

///
/// Testing
///

test {
  exclude 'hw3/**'
  // exclude 'hw4/**'
  // exclude 'hw5/**'
}

tasks.withType(Test) {
    enableAssertions = true
}

task copyHw5TestScripts(type: Copy) {
  from "src/test/java/hw5"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw5/"
}
test.dependsOn copyHw5TestScripts

///
/// Extra code quality checks
///

compileJava {
    exclude 'hw3/**'
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    exclude 'hw3/**'
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


///
/// Validation: Checking additional assignment requirements
///

task validate {
  description = 'Validate the working copy.  Ensures that the project builds and that required files exist.'
  doLast {
    def String[] homeworkProperties = homeworks.split(',')
    homeworkProperties.each { requiredHwFiles ->
      def String[] requiredFiles = getProperty(requiredHwFiles).split(',')
      requiredFiles.each { fileName ->
        fileName = fileName.trim()
        if (! file("${fileName}").exists()) {
	  throw new GradleException("File ${fileName} does not exist.")
	}
      }
    }
  }
}
validate.dependsOn clean
validate.dependsOn build
validate.dependsOn javadoc

///
/// Other targets
///

task cleanByRenaming {
  description = 'Use this when the "clean" target fails due to "unable to delete file" "device or resource busy".'
  doLast {
    File destinationDir = new File("${buildDir}", 'deleteme-' + new Random().nextInt(1000000))
    mkdir destinationDir
    println "destinationDir = " + destinationDir
    buildDir.eachFile { f ->
      println "Processing " + f
      f.renameTo(new File(destinationDir, f.getName()))
    }
  }
}


///
/// Targets for course staff use
///

task javadocStaging(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = new File("/cse/web/courses/cse331/staff/staging/api")
}

task javadocPublic(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = new File("/cse/web/courses/cse331/19wi/api")
}

sourceSets {
  staffTest {
    java {
      srcDirs = ['src/staff_test/java']
    }
    compileClasspath += sourceSets.main.runtimeClasspath
  }
}

task staffTest(type: Test) {
  description = "Runs staff Tests"
  testClassesDirs = sourceSets.staffTest.output.classesDirs
  classpath += sourceSets.staffTest.runtimeClasspath
}
staffTest.dependsOn test
