  // Students should not edit this file.

plugins {
  id "net.ltgt.errorprone-base" version "0.0.13"
  id 'org.ajoberstar.grgit' version '2.3.0'
}
apply plugin: 'java'

import org.ajoberstar.grgit.Grgit

// sourceCompatibility = 1.11
// targetCompatibility = 1.11

repositories {
  mavenCentral()
  jcenter()
}

  dependencies {
      implementation 'asm:asm-all:2.2.3'

      // for staff tools

      // These should really be testImplementation, but put them in implementation so

      // javadoc target works without change for test files.
      implementation 'junit:junit:4.12'
      implementation 'org.hamcrest:hamcrest-core:1.3'
      implementation 'org.hamcrest:hamcrest-all:1.3'
      implementation 'com.opencsv:opencsv:4.3.2'
      compile 'org.ajoberstar:grgit:2.3.0'
  }

javadoc {
    options.tags = [ "spec.modifies", "spec.effects", "spec.requires", "specfield" ] 
}

tasks.withType(Javadoc) {
  exclude 'hw3/**'
  options.addStringOption('Xwerror', '-quiet')
}

compileJava {
  exclude 'hw3/**'
  exclude 'hw4/**'
}

compileTestJava {
  exclude 'hw3/**'
  exclude 'hw4/**'
}

///
/// Testing
///

test {
  exclude 'hw3/**'
  exclude 'hw4/**'
  // exclude 'hw5/**'
  // exclude 'hw6/**'
  // exclude 'hw7/**'
  // exclude 'hw8/**'
  exclude 'hw9/**'
}

tasks.withType(Test) {
    enableAssertions = true
}

///
/// Copying files for ScriptTests
///

task copyHw5TestScripts(type: Copy) {
  from "src/test/java/hw5"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw5/"
}
test.dependsOn copyHw5TestScripts

task copyHw6TestScripts(type: Copy) {
  from "src/test/java/hw6"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw6/"
}
test.dependsOn copyHw6TestScripts

task copyHw7TestScripts(type: Copy) {
  from "src/test/java/hw7"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw7/"
}
test.dependsOn copyHw7TestScripts

task copyHw8TestScripts(type: Copy) {
  from "src/test/java/hw8"
  include "*.test", "*.expected"
  into "${buildDir}/classes/java/test/hw8/"
}
test.dependsOn copyHw8TestScripts

///
/// Extra code quality checks
///

compileJava {
    exclude 'hw3/**'
    exclude 'hw4/**'
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    exclude 'hw3/**'
    exclude 'hw4/**'
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


///
/// Validation: Checking additional assignment requirements
///

task validate {
  description = 'Validate the working copy.  Ensures that the project builds and that required files exist.'
  doLast {
    def String[] homeworkProperties = homeworks.split(',')
    homeworkProperties.each { requiredHwFiles ->
      def String[] requiredFiles = getProperty(requiredHwFiles).split(',')
      requiredFiles.each { fileName ->
        fileName = fileName.trim()
        if (! file("${fileName}").exists()) {
	  throw new GradleException("File ${fileName} does not exist.")
	}
      }
    }
  }
}
validate.dependsOn clean
validate.dependsOn build
validate.dependsOn javadoc

///
/// Other targets
///

task cleanByRenaming {
  description = 'Use this when the "clean" target fails due to "unable to delete file" "device or resource busy".'
  doLast {
    File destinationDir = new File("${buildDir}", 'deleteme-' + new Random().nextInt(1000000))
    mkdir destinationDir
    println "destinationDir = " + destinationDir
    buildDir.eachFile { f ->
      println "Processing " + f
      f.renameTo(new File(destinationDir, f.getName()))
    }
  }
}

task runMarvel(type:JavaExec) {
   main = "hw6/MarvelPaths"
   standardInput = System.in
   classpath = sourceSets.main.runtimeClasspath
}

task runMarvel2(type:JavaExec) {
   main = "hw7/MarvelPaths2"
   standardInput = System.in
   classpath = sourceSets.main.runtimeClasspath
}

task runCampusPaths(type:JavaExec) {
   main = "hw8/CampusPathsTextUI"
   standardInput = System.in
   classpath = sourceSets.main.runtimeClasspath
}

task runGUI(type:JavaExec) {
   main = "hw9/CampusPathsGUI"
   standardInput = System.in
   classpath = sourceSets.main.runtimeClasspath
}
